/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Arvore.jj */
/*@egen*/options{  LOOKAHEAD= 1;  static = true;}PARSER_BEGIN(DSL)import java.io.*;public class DSL/*@bgen(jjtree)*/implements DSLTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTDSLState jjtree = new JJTDSLState();

/*@egen*/  public static void main(String args [])  {	if( args.length != 1){		System.out.println("Run: java -jar <name of the jar file.jar> <path of the example>");		System.exit(0);	}	    DSL dsl = null;       	if( args[0] != null )   	{      System.out.println("-- " + args[0] + " --");      try      {        File toParse = new File(Generator.extractDSLCode(new File(args[0])));        InputStream inputStream = new FileInputStream(toParse);        if (dsl == null) dsl = new DSL(inputStream);        else ReInit(inputStream);        try        {          SimpleNode n = DSL.Start();          n.deleteUninterestingNodes();          //n.dump("");          Warning.dump();          Generator gen = new Generator(new File(args[0]), n);          System.out.println("Successfully Parsed and Generated!\n");          // Clear all the static stuff for the next file parsing          VariableStore.clear();          MyVariable.clear();          Warning.dump();          Warning.clear();          Generator.clean();        }        catch (SemanticException e)        {          System.err.println("::: Semantic Error :::");          System.err.println(e.getMessage());        }        catch (Exception e)        {          System.err.println("::: Syntax Error :::");          System.err.println(e.getMessage());          e.printStackTrace();        }      }      catch (IOException e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());      }  	}  	else  	{  	  System.out.println("No input files");  	}  }}PARSER_END(DSL)SKIP :{  " "| "\r"| "\t"| "\n"  //| "[^/\*@mat]*/\*@mat[^\*/]\*/"}/*OPERATORS */TOKEN :{  < IN : "in" >| < OUT : "out" >| < PLUS : "+" >| < MINUS : "-" >| < STAR : "*" >| < SLASH : "/" >| < FLOAT : "float" >| < INT : "int" >| < DOUBLE : "double" >| < LPAREN : "(" >| < RPAREN : ")" >| < LBRACKET : "[" >| < RBRACKET : "]" >| < SEMICOLON : ";" >| < ASSIGN : "=" >| < COLON : ":" >}//TOKEN :{  < INTEGER : ([ "0"-"9" ])+ >| < DECIMAL_NUMBER : < INTEGER > "." < INTEGER >>| < VAR :    (      [ "A"-"Z", "a"-"z" ] ([ "0"-"9", "A"-"Z", "a"-"z" ])*    ) >| < ARROBAMAT : "@mat" >| < LETTERS : ([ "A"-"Z", "a"-"z" ])+ >}SimpleNode Start() throws Exception :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  parseDSL()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof Exception) {
      throw (Exception)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void parseDSL() throws Exception       :{}{  "/*@mat" dslStatements() "*/"}void dslStatements() throws Exception       :{}{  (    dslLine()  )+}void dslLine() throws Exception       :{}{  dslDeclaration() < SEMICOLON >| dslAtribution() < SEMICOLON >}Token dslDataType()       :{  Token t;}{  (    t = < INT >  | t = < FLOAT >  | t = < DOUBLE >  )  {    return t;  }}void dslDeclaration() throws SemanticException       :{  Token t1, t2, t3, t4;  boolean gotRanged = false;}{  (t1 = < IN >)  (    t2 = dslDataType()  )  (t3 = < VAR >) < LBRACKET >  (    (t4 = < INTEGER >) /* Has range declared */    {      //MyVariable.rangeOnDeclaration = true;      if (!MyVariable.checkRange(Integer.parseInt(t4.image))) throw new SemanticException("Variable " + t3.image + " has a wrong range for a matrix (sqrt(" + t4.image + ") is valid for no. of rows).");      gotRanged = true;      VariableStore.add(new MyVariable(t3.image, t2, t1, Integer.parseInt(t4.image)));    }  )?  < RBRACKET >  {    if (!gotRanged)    {      VariableStore.add(new MyVariable(t3.image, t2, t1, - 1));    }  }| (t1 = < OUT >)  (    t2 = dslDataType()  )  (t3 = < VAR >) < LBRACKET > < RBRACKET >  {    VariableStore.add(new MyVariable(t3.image, t2, t1, - 1));  }}void dslAtribution() throws Exception : {/*@bgen(jjtree) dslAtribution */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLATRIBUTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t, t1;  Integer [ ] indxRange = null;}{/*@bgen(jjtree) dslAtribution */
  try {
/*@egen*/  (    t1 = dslVarAtr()  )  (    (t = < ASSIGN >) dslExpr() // SEM RANGE  |    (      indxRange = dslVarWithRange(t1)    )    (t = < ASSIGN >) dslExpr2() // COM RANGE  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.symbol = t.image;    jjtn000.indicesRange = indxRange;    int rangeDeclaration = VariableStore.getRange(jjtn000.symbol);    if (indxRange != null)      if (rangeDeclaration != -1 && rangeDeclaration <= jjtn000.indicesRange [ 1 ]) throw new SemanticException("Range defined in operation bigger than range declared in declaration on variable " + jjtn000.symbol);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof Exception) {
      throw (Exception)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token dslVarAtr() throws Exception       :{  Token t;}{  (t = < VAR >)/*@bgen(jjtree) Term */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTTERM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001, true);
    jjtc001 = false;
  }
/*@egen*/  {    jjtn001.symbol = t.image;    //VariableStore.dump();    switch (VariableStore.checkVariable(t.image, false))    {      case 0 : throw new ParseException("Variable " + t.image + " was not instantiated or is not a valid keyword.");      break;      case 1 : throw new SemanticException("Variable " + t.image + " is in the wrong call order. Should be used as input and not as output.");      break;      default : break;    }    return t;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       }Token dslVar()throws SemanticException       :{  Token t;}{  (t = < VAR >)  {    switch (VariableStore.checkVariable(t.image, true))    {      case 0 : throw new ParseException("Variable " + t.image + " was not instantiated or is not a valid keyword.");      break;      case 1 : throw new SemanticException("Variable " + t.image + " is in the wrong call order. Should be used as output and not as input.");      break;      default : break;    }    return t;  }}Integer [ ] dslVarWithRange(Token var) throws SemanticException       :{  Token t1, t2;}{  < LPAREN > (t1 = < INTEGER >) < COLON > (t2 = < INTEGER >) < RPAREN >  {    //if (MyVariable.rangeOnDeclaration) throw new ParseException("Range Specified on Declaration. Specify it only in one place!");    int r1, r2;    if ((r1 = Integer.parseInt(t1.image)) >= (r2 = Integer.parseInt(t2.image))) throw new SemanticException("Wrong Range Values.!" + r2 + " should be less than " + r1);    if (!MyVariable.checkRange((r2 + 1 - r1))) throw new SemanticException("Variable has a wrong range (" + r1 + ":" + r2 + ") for a matrix (sqrt() is valid for no. of rows).");    Integer [ ] retorno = new Integer [ 2 ];    retorno [ 0 ] = new Integer(r1);    retorno [ 1 ] = new Integer(r2);    return retorno;    //if (Math.sqrt(r2-r1) == double) throw new SemanticException();    //if (MyVariable.range < r + 1) MyVariable.range = r + 1;    //VariableStore.setRange(var.image, r+1);  }}void dslExpr() throws SemanticException :{/*@bgen(jjtree) dslExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String s;}{/*@bgen(jjtree) dslExpr */
  try {
/*@egen*/  dslTerm() s = dslTermTail()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (s != null) jjtn000.symbol = s;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void dslTerm() throws SemanticException :{/*@bgen(jjtree) dslTerm */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String s;}{/*@bgen(jjtree) dslTerm */
  try {
/*@egen*/  dslFactor() s = dslFactorTail()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (s != null) jjtn000.symbol = s;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String dslTermTail() throws SemanticException :{/*@bgen(jjtree) dslTermTail */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLTERMTAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String s;}{/*@bgen(jjtree) dslTermTail */
  try {
/*@egen*/  t = dslAddOp() dslTerm() s = dslTermTail()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    //jjtThis.symbol = t.image;    if (s != null) jjtn000.symbol = s;    return t.image;  }|  {}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return null;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void dslFactor() throws SemanticException :{/*@bgen(jjtree) dslFactor */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) dslFactor */
  try {
/*@egen*/  (    //< LPAREN > dslExpr() < RPAREN >    dslParenteses() dslExpr() dslParenteses()  | t = dslVar()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      jjtn000.symbol = t.image;    }  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void dslParenteses() :{/*@bgen(jjtree) dslParenteses */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLPARENTESES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) dslParenteses */
  try {
/*@egen*/  ( t = < LPAREN > | t = < RPAREN > )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.symbol = t.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String dslFactorTail() throws SemanticException :{/*@bgen(jjtree) dslFactorTail */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLFACTORTAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String s;}{/*@bgen(jjtree) dslFactorTail */
  try {
/*@egen*/  (    t = dslMultOp() dslFactor() s = dslFactorTail()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      //jjtThis.symbol = t.image;      if (s != null) jjtn000.symbol = s;      return t.image;    }  |    {}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      return null;    }  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}// Handling the variables having inline range definedvoid dslExpr2() throws SemanticException :{/*@bgen(jjtree) dslExpr2 */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLEXPR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String s;}{/*@bgen(jjtree) dslExpr2 */
  try {
/*@egen*/  dslTerm2() s = dslTermTail2()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (s != null) jjtn000.symbol = s;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void dslTerm2() throws SemanticException :{/*@bgen(jjtree) dslTerm2 */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLTERM2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String s;}{/*@bgen(jjtree) dslTerm2 */
  try {
/*@egen*/  dslFactor2() s = dslFactorTail2()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (s != null) jjtn000.symbol = s;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String dslTermTail2() throws SemanticException :{/*@bgen(jjtree) dslTermTail2 */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLTERMTAIL2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String s;}{/*@bgen(jjtree) dslTermTail2 */
  try {
/*@egen*/  t = dslAddOp() dslTerm2() s = dslTermTail2()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (s != null) jjtn000.symbol = s;    return t.image;  }|  {}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return null;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void dslFactor2() throws SemanticException :{/*@bgen(jjtree) dslFactor2 */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLFACTOR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  Integer [ ] indxRange;}{/*@bgen(jjtree) dslFactor2 */
  try {
/*@egen*/  (    //< LPAREN > dslExpr2() < RPAREN >    dslParenteses() dslExpr2() dslParenteses()  |    (      t = dslVar()    )    indxRange = dslVarWithRange(t)/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      jjtn000.symbol = t.image;      jjtn000.indicesRange = indxRange;      int rangeDeclaration = VariableStore.getRange(jjtn000.symbol);      if (rangeDeclaration != -1 && rangeDeclaration <= jjtn000.indicesRange [ 1 ]) throw new SemanticException("Range defined in operation bigger than range declared in declaration on variable " + jjtn000.symbol);    }  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String dslFactorTail2() throws SemanticException :{/*@bgen(jjtree) dslFactorTail2 */
  SimpleNode jjtn000 = new SimpleNode(JJTDSLFACTORTAIL2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String s;}{/*@bgen(jjtree) dslFactorTail2 */
  try {
/*@egen*/  (    t = dslMultOp() dslFactor2() s = dslFactorTail2()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      //jjtThis.symbol = t.image;      if (s != null) jjtn000.symbol = s;      return t.image;    }  |    {}/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      return null;    }  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    if (jjte000 instanceof SemanticException) {
      throw (SemanticException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Token dslAddOp()       :{  Token t;}{  (    (t = < PLUS >)  | (t = < MINUS >)  )  {    return t;  }}Token dslMultOp()       :{  Token t;}{  (    (t = < STAR >)  | (t = < SLASH >)  )  {    return t;  }}