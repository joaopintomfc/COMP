import java.text.MessageFormat;
import java.util.Arrays;
import java.util.Vector;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class SimpleNode implements Node {

	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected DSL parser;
	public String symbol; /* Can be an operator or a name of a variable */

	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(DSL p, int i) {
		this(i);
		parser = p;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public void deleteChild(int i) {

		children[i] = null;
		Node[] childrenTemp = new Node[children.length - 1];
		for (int a = i + 1; a < children.length; a++) {
			children[a - 1] = children[a];
		}

		for (int a = 0; a < childrenTemp.length; a++) {
			childrenTemp[a] = children[a];
		}

		children = new Node[childrenTemp.length];

		for (int a = 0; a < children.length; a++) {
			children[a] = childrenTemp[a];
		}
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(Object value) {
		this.value = value;
	}

	public Object jjtGetValue() {
		return value;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to
	 * customize the way the node appears when the tree is dumped. If your
	 * output uses more than one line you should override toString(String),
	 * otherwise overriding toString() is probably all you need to do.
	 */

	public String toString() {
		return DSLTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */
	public void appendChild(Node n) {
		int i = jjtGetNumChildren();
		this.jjtAddChild(n, i);
	}

	public void deleteChild(Node n) {
		for (int i = 0; i < jjtGetNumChildren(); i++) {
			if (n == children[i])
				deleteChild(i);
		}
	}

	public boolean deleteUninterestingNodes() {

		//String strParent = toString();
		if (this.symbol == null && jjtGetParent() != null) {
			Node parent = this.jjtGetParent();

			for (int i = 0; i < parent.jjtGetNumChildren(); i++) {
				if (this == parent.jjtGetChild(i)) {
					parent.deleteChild(i);
					break;
				}
			}

			for (int i = 0; i < jjtGetNumChildren(); i++) {
				parent.appendChild(this.children[i]);
				children[i].jjtSetParent(parent);
				// this.deleteChild(i);
			}

			this.jjtSetParent(null);
			return true;
		} else {
			for (int i = 0; i < jjtGetNumChildren(); i++) {

				Node actualChild = children[i];
				//String strChildren = children[i].toString();
				boolean apagou = children[i].deleteUninterestingNodes();
				if (apagou) {
					deleteChild(actualChild);
					i--;
				}
			}
			return false;
		}

	}

	public void dump(String prefix) {
		System.out.println(symbol != null ? toString(prefix) + " Symbol:"
				+ symbol : toString(prefix));
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}

	@Override
	public void setSymbol(String s) {
		symbol = s;

	}

	@Override
	public String getSymbol() {
		return symbol;
	}

	@Override
	public void setSymbolParent(String s) {
		parent.setSymbol(s);

	}

	public String getCodeAux(int raizRangeMinVarsAtribuicao) {
		if (symbolIsAnOperator()) {
			return new String("("
					+ children[0].getCodeAux(raizRangeMinVarsAtribuicao) + "."
					+ getCodeOperation(symbol)
					+ children[1].getCodeAux(raizRangeMinVarsAtribuicao) + ")");
		} else
			return new String("(new CustomMatrix (" + symbol + ","
					+ raizRangeMinVarsAtribuicao + "))");
	}

	public String getCode() throws SemanticException {
		if (symbol == null) {
			String retorno = new String("");

			for (int i = 0; i < jjtGetNumChildren(); i++) {
				retorno = new String(retorno + children[i].getCode());
			}
			return retorno;
		} else if (isAtribution()) {
			int range = getRange();
			if (range == -1)
				throw new SemanticException("No range was defined");
			int raizRange = (int) Math.sqrt(range);
			String retorno = new String(children[0].getSymbol() + "="
					+ children[1].getCodeAux(raizRange) + ".getArrayCopy"
					+ tipoRetorno(children[0]) + "();\n");
			return retorno;
		} else
			return null;
	}
	
	/*
	//ONLY CALLED IN START PRODUCTION WHEN SYMBOL == NULL
	public void throwExceptionIfNoRangeWasDefined() throws SemanticException {
		for (int i = 0; i < jjtGetNumChildren(); i++) {
			if (children[i].getRangeMin() == -1)
				throw new SemanticException("No range was defined in" + (i+1) + "ยบ Atribution (=)");
		}
	}
	*/

	private String tipoRetorno(Node node) {
		return VariableStore.getType(node.getSymbol());
	}

	// NOT CALLED WHEN SYMBOL == NULL
	public int getRange() throws SemanticException {
		if (jjtGetNumChildren() == 0) {
			return VariableStore.getRange(symbol);

		} else {
			int range = -1;

			for (int i = 0; i < jjtGetNumChildren(); i++) {
				int rangeChild = children[i].getRange();

				if (range != -1 && rangeChild != -1 && range != rangeChild)
					throw new SemanticException("Different range in operating variables");
				
				if (range == -1 && rangeChild != -1)
					range = rangeChild;
			}

			return range;
		}
	}

	private boolean isAtribution() {
		return (symbol.equals("="));
	}

	private String getCodeOperation(String op) {
		switch (op) {
		case "*":
			return "times";
		case "/":
			return "divide";
		case "+":
			return "plus";
		case "-":
			return "minus";
		default:
			return null;

		}
	}

	private boolean symbolIsAnOperator() {
		return (getCodeOperation(symbol) != null);
	}

}

/*
 * JavaCC - OriginalChecksum=6de11f5939191cba166b5dd216acf9a6 (do not edit this
 * line)
 */
