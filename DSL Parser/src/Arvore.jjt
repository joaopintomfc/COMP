options{  LOOKAHEAD = 1;  static = true;}PARSER_BEGIN(DSL)import java.io.*;public class DSL{    public static void main(String args [])  {    System.out.println("Reading from directory testUnits/");    File [] files;    File file = new File("testUnits/");    files = file.listFiles();    for (int i = 0; i < files.length; i++)    {      System.out.println("::: "+ files[i].getName()+" :::");      try      {        InputStream inputStream = new FileInputStream(files[i]);        new DSL(inputStream);        try        {          SimpleNode n = DSL.Start();          n.dump("");          System.out.println("Thank you.");        }        catch (Exception e)        {          System.out.println("Oops.");          System.out.println(e.getMessage());        }      }      catch (FileNotFoundException e)      {          System.out.println("Oops.");          System.out.println(e.getMessage());      }    }  }}PARSER_END(DSL)SKIP :{  " "| "\r"| "\t"| "\n"}/*OPERATORS */TOKEN :{  < IN : "in" >| < OUT : "out" >| < PLUS : "+" >| < MINUS : "-" >| < STAR : "*" >| < SLASH : "/" >| < FLOAT : "float" >| < INT : "int" >| < DOUBLE : "double" >| < LPAREN : "(" >| < RPAREN : ")" >| < LBRACKET : "[" >| < RBRACKET : "]" >| < SEMICOLON : ";" >| < ASSIGN : "=" >| < COLON : ":" >}//TOKEN :{  < INTEGER : ([ "0"-"9" ])+ >| < DECIMAL_NUMBER : < INTEGER > "." < INTEGER >>| < VAR :    (      [ "A"-"Z", "a"-"z" ] ([ "0"-"9", "A"-"Z", "a"-"z" ])*    ) >| < ARROBAMAT : "@mat" >| < LETTERS : ([ "A"-"Z", "a"-"z" ])+ >}// /*@mat in int A[]; in float B[100]; out float C[]; C=A+B; */SimpleNode Start() :{}{   parseDSL()  { return jjtThis; }}void parseDSL() #void :{}{  "/*@mat" dslStatements() "*/"}void dslStatements() #void :{}{  (    dslLine()  )+}void dslLine() #void :{}{  dslDeclaration() < SEMICOLON >| dslAtribution() < SEMICOLON >}Token dslDataType() :{Token t;}{  (    t=< INT >    | t=< FLOAT >    | t=< DOUBLE >  )  {return t;}}void dslDeclaration() #void :{Token t1,t2,t3,t4;}{  (t1=< IN >) (t2=dslDataType()) (t3=< VAR >)  < LBRACKET > (    (t4=< INTEGER >) /* Has range declared */    {      MyVariable.rangeOnDeclaration = true;      VariableStore.storage.add(new MyVariable(t3.image, t1, t2, Integer.parseInt(t4.image)));    }    )?    < RBRACKET >    {	  if(!MyVariable.rangeOnDeclaration)	  {		 VariableStore.storage.add(new MyVariable(t3.image, t1, t2, -1));	  }    }| (t1=< OUT >) (t2=dslDataType()) (t3=< VAR >) < LBRACKET > < RBRACKET > {	VariableStore.storage.add(new MyVariable(t3.image, t1, t2, -1)); }}void dslAtribution() : // TAG WITH ={ /*Token t;*/}{  dslAtributionVar()  (    /*t = */    < ASSIGN > dslExpr() // SEM RANGE  | dslVarWithRange()  /*t = */< ASSIGN > dslExpr2() // COM RANGE  ) /*  {    jjtThis.;  }*/}void dslAtributionVar() #void :{}{	< VAR > #Term}void dslVarWithRange() #void : // atribuir e tratar range{}{  < LPAREN > < INTEGER > < COLON > < INTEGER > < RPAREN >}void dslExpr() #void :{}{  dslTerm() dslTermTail()}void dslTerm() #void :{}{  dslFactor() dslFactorTail()}void dslTermTail() #void :{}{  dslAddOp() dslTerm() dslTermTail()|  {}}void dslFactor() #void:{}{  < LPAREN > dslExpr() < RPAREN >| < VAR > #Term}void dslFactorTail() #void :{}{  dslMultOp() dslFactor() dslFactorTail()|  {}}// Handling the variables having inline range definedvoid dslExpr2() #void :{}{  dslTerm2() dslTermTail2()}void dslTerm2() #void :{}{  dslFactor2() dslFactorTail2()}void dslTermTail2() #void :{}{  dslAddOp() dslTerm2() dslTermTail2()|  {}}void dslFactor2() :{}{  < LPAREN > dslExpr2() < RPAREN >| < VAR > dslVarWithRange() // TERM}void dslFactorTail2() #void :{}{  dslMultOp() dslFactor2() dslFactorTail2() |  {}}void dslAddOp() :{}{  < PLUS >| < MINUS >} // TAG WITH OPvoid dslMultOp() :{}{  < STAR >| < SLASH >} // TAG WITH MULT OP