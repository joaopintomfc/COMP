options{  LOOKAHEAD= 1;  static = true;}PARSER_BEGIN(DSL)import java.io.*;public class DSL{  public static void main(String args [])  {    System.out.println("Reading from directory testUnits/");    File [] files;    File file = new File("testUnits/");    files = file.listFiles();    for (int i = 0; i < files.length; i++)    {      System.out.println("::: " + files [i].getName() + " :::");      try      {        InputStream inputStream = new FileInputStream(files [i]);        new DSL(inputStream);        try        {          SimpleNode n = DSL.Start();          n.deleteUninterestingNodes();          n.dump("");          System.out.println("Thank you.");        }        catch (Exception e)        {          System.out.println("Oops.");          System.out.println(e.getMessage());          e.printStackTrace();        }      }      catch (FileNotFoundException e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());      }    }  }}PARSER_END(DSL)SKIP :{  " "| "\r"| "\t"| "\n"}/*OPERATORS */TOKEN :{  < IN : "in" >| < OUT : "out" >| < PLUS : "+" >| < MINUS : "-" >| < STAR : "*" >| < SLASH : "/" >| < FLOAT : "float" >| < INT : "int" >| < DOUBLE : "double" >| < LPAREN : "(" >| < RPAREN : ")" >| < LBRACKET : "[" >| < RBRACKET : "]" >| < SEMICOLON : ";" >| < ASSIGN : "=" >| < COLON : ":" >}//TOKEN :{  < INTEGER : ([ "0"-"9" ])+ >| < DECIMAL_NUMBER : < INTEGER > "." < INTEGER >>| < VAR :    (      [ "A"-"Z", "a"-"z" ] ([ "0"-"9", "A"-"Z", "a"-"z" ])*    ) >| < ARROBAMAT : "@mat" >| < LETTERS : ([ "A"-"Z", "a"-"z" ])+ >}// /*@mat in int A[]; in float B[100]; out float C[]; C=A+B; */SimpleNode Start() :{}{  parseDSL()  {    return jjtThis;  }}void parseDSL() #void :{}{  "/*@mat" dslStatements() "*/"}void dslStatements() #void :{}{  (    dslLine()  )+}void dslLine() #void :{}{  dslDeclaration() < SEMICOLON >| dslAtribution() < SEMICOLON >}Token dslDataType() #void :{  Token t;}{  (    t = < INT >  | t = < FLOAT >  | t = < DOUBLE >  )  {    return t;  }}void dslDeclaration() #void :{  Token t1, t2, t3, t4;}{  (t1 = < IN >)  (    t2 = dslDataType()  )  (t3 = < VAR >) < LBRACKET >  (    (t4 = < INTEGER >) /* Has range declared */    {      MyVariable.rangeOnDeclaration = true;      VariableStore.storage.add(new MyVariable(t3.image, t1, t2, Integer.parseInt(t4.image)));    }  )?  < RBRACKET >  {    if (!MyVariable.rangeOnDeclaration)    {      VariableStore.storage.add(new MyVariable(t3.image, t1, t2, - 1));    }  }| (t1 = < OUT >)  (    t2 = dslDataType()  )  (t3 = < VAR >) < LBRACKET > < RBRACKET >  {    VariableStore.storage.add(new MyVariable(t3.image, t1, t2, - 1));  }}void dslAtribution() : // TAG WITH ={  Token t;}{  dslVarAtr()  (    (t = < ASSIGN >) dslExpr() // SEM RANGE  | dslVarWithRange() (t = < ASSIGN >) dslExpr2() // COM RANGE  )  {    jjtThis.symbol = t.image;  }}void dslVarAtr() #void :{  Token t;}{  (t = < VAR >)  {    jjtThis.symbol = t.image;  } #Term}Token dslVar() #void :{  Token t;}{  (t = < VAR >)  {    return t;  }}void dslVarWithRange() #void :{  Token t1, t2;}{  < LPAREN > (t1 = < INTEGER >) < COLON > (t2 = < INTEGER >) < RPAREN >  {    if (MyVariable.rangeOnDeclaration) throw new ParseException("Range Specified on Declaration. Specify it only in one place!");    int r;    if (Integer.parseInt(t1.image) > (r = Integer.parseInt(t2.image))) throw new ParseException("Wrong Range Values!");    if (MyVariable.range < r + 1) MyVariable.range = r + 1;  }}void dslExpr() :{  String s;}{  dslTerm() s = dslTermTail()  {    if (s != null) jjtThis.symbol = s;  }}void dslTerm() :{String s;}{  dslFactor() s=dslFactorTail()  {    if (s != null) jjtThis.symbol = s;  }}String dslTermTail():{  Token t; String s;}{  t = dslAddOp() dslTerm() s=dslTermTail()  {    //jjtThis.symbol = t.image;    if (s != null) jjtThis.symbol = s;    return t.image;  }|  {}  {    return null;  }}void dslFactor() :{  Token t;}{  (    < LPAREN > dslExpr() < RPAREN >  | t = dslVar()    {      jjtThis.symbol = t.image;    }  )}String dslFactorTail() :{  Token t; String s;}{  (    t = dslMultOp() dslFactor() s=dslFactorTail()    {      //jjtThis.symbol = t.image;      if (s != null) jjtThis.symbol = s;      return t.image;    }  |    {}    {      return null;    }  )}// Handling the variables having inline range definedvoid dslExpr2() #void :{}{  dslTerm2() dslTermTail2()}void dslTerm2() #void :{}{  dslFactor2() dslFactorTail2()}void dslTermTail2() #void :{}{  dslAddOp() dslTerm2() dslTermTail2()|  {}}void dslFactor2() :{}{  < LPAREN > dslExpr2() < RPAREN >| dslVar() dslVarWithRange() // TERM}void dslFactorTail2() #void :{}{  dslMultOp() dslFactor2() dslFactorTail2()|  {}}Token dslAddOp()  :{  Token t;}{  (    (t = < PLUS >)  | (t = < MINUS >)  )  {    return t;  }}Token dslMultOp()  :{  Token t;}{  (    (t = < STAR >)  | (t = < SLASH >)  )  {    return t;  }}